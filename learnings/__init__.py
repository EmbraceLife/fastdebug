
    @snoop(watch=('self.blocks', 'self.type_tfms', 'blocks[0].attrgot("type_tfms", L())'))                                                              (0)
    def __init__(self, ===================================================================(1)       
        blocks:list=None, # One or more `TransformBlock`s, e.g., ImageBlock, CategoryBlock                                                              (2)
        dl_type:TfmdDL=None, # Task specific `TfmdDL`, defaults to `block`'s dl_type or`TfmdDL`                                                         (3)
        getters:list=None, # Getter functions applied to results of `get_items`===========(4)       
        n_inp:int=None, # Number of inputs================================================(5)       
        item_tfms:list=None, # `ItemTransform`s, applied on an item ======================(6)       
        batch_tfms:list=None, # `Transform`s or `RandTransform`s, applied by batch========(7)       
        **kwargs, ========================================================================(8)       
    ):====================================================================================(9)       
        "Prepare and organise all the funcs needed to split and transform x and getting y or labels"                                                    (10)
        blocks = L(self.blocks if blocks is None else blocks)=============================(11)      
        blocks = L(b() if callable(b) else b for b in blocks)=============================(12)      
        self.type_tfms = blocks.attrgot('type_tfms', L())=================================(13)      
        self.default_item_tfms  = _merge_tfms(*blocks.attrgot('item_tfms',  L()))=========(14)      
        self.default_batch_tfms = _merge_tfms(*blocks.attrgot('batch_tfms', L()))=========(15)      
        for b in blocks:==================================================================(16)      
            if getattr(b, 'dl_type', None) is not None: self.dl_type = b.dl_type==========(17)      
        if dl_type is not None: self.dl_type = dl_type====================================(18)      
        self.dataloaders = delegates(self.dl_type.__init__)(self.dataloaders)=============(19)      
        self.dls_kwargs = merge(*blocks.attrgot('dls_kwargs', {}))========================(20)      
                                                                                                                                                        (21)
        self.n_inp = ifnone(n_inp, max(1, len(blocks)-1)) # n_inp is dependent on the number of blocks                                                  (22)
        self.getters = ifnone(getters, [noop]*len(self.type_tfms))========================(23)      
        if self.get_x:====================================================================(24)      
            if len(L(self.get_x)) != self.n_inp:==========================================(25)      
                raise ValueError(f'get_x contains {len(L(self.get_x))} functions, but must contain {self.n_inp} (one for each input)\n{self._msg}')     (26)
            self.getters[:self.n_inp] = L(self.get_x)=====================================(27)      
        if self.get_y:====================================================================(28)      
            n_targs = len(self.getters) - self.n_inp======================================(29)      
            if len(L(self.get_y)) != n_targs:=============================================(30)      
                raise ValueError(f'get_y contains {len(L(self.get_y))} functions, but must contain {n_targs} (one for each target)\n{self._msg}')       (31)
            self.getters[self.n_inp:] = L(self.get_y)=====================================(32)      
                                                                                                                                                        (33)
        if kwargs: raise TypeError(f'invalid keyword arguments: {", ".join(kwargs.keys())}')                                                            (34)
        self.new(item_tfms, batch_tfms)===================================================(35)      
                                                                                                                                                        (36)
