def funcs_kwargs(as_method=False):========================================================(0)           "Replace methods in `cls._methods` with those from `kwargs`"==========================(1)           if callable(as_method): return _funcs_kwargs(as_method, False)========================(2)           return partial(_funcs_kwargs, as_method=as_method)====================================(3)                                                                                                                                                               (4)def funcs_kwargs(as_method=False):========================================================(0)           "Replace methods in `cls._methods` with those from `kwargs`"==========================(1) # [36;1mhow funcs_kwargs works[0m; [34;1mit is a wrapper around _funcs_kwargs[0m; [91;1mit offers two ways of running _funcs_kwargs[0m; [35;1mthe first, default way, is to add a func to a class without using self[0m; [34;1msecond way is to add func to class enabling self use;[0m;     if callable(as_method): return _funcs_kwargs(as_method, False)========================(2) # [91;1mhow to check whether an object is callable[0m; [35;1mhow to return a result of running a func[0m; [34;1m[0m;     return partial(_funcs_kwargs, as_method=as_method)====================================(3) # [37;1mhow to custom the params of `_funcs_kwargs` for a particular use with partial[0m;                                                                                                                                                         (4)
