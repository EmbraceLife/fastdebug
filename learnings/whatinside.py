whatinside(core, lib=True)
def whatinside(mo, # module, e.g., `import fastcore.all as fa`, use `fa` here=============(0)       
               dun:bool=False, # print all items in __all__===============================(1)       
               func:bool=False, # print all user defined functions========================(2)       
               method:bool=False, ========================================================(3)       
               clas:bool=False, # print all class objects=================================(4)       
               bltin:bool=False, # print all builtin funcs or methods=====================(5)       
               lib:bool=False, # print all the modules of the library it belongs to=======(6)       
               cal:bool=False # print all callables=======================================(7)       
             ): ==========================================================================(8)       
    'Check what inside a module: `__all__`, functions, classes, builtins, and callables'==(9) # [91;1mhow many items inside mo.__all__?[0m; 
    dun_all = len(mo.__all__) if hasattr(mo, "__all__") else 0============================(10) # [35;1mget all funcs of a module[0m; 
    funcs = inspect.getmembers(mo, inspect.isfunction)====================================(11) # [93;1mget all classes from the module[0m; 
    methods = inspect.getmembers(mo, inspect.ismethod)    ================================(12)      
    classes = inspect.getmembers(mo, inspect.isclass)=====================================(13)      
    builtins = inspect.getmembers(mo, inspect.isbuiltin)==================================(14) # [37;1mget the file path of the module[0m; 
    callables = inspect.getmembers(mo, callable)==========================================(15)      
    pkgpath = os.path.dirname(mo.__file__)================================================(16)      
    module_env = mo.__dict__==============================================================(17)      
    kind = None # assignment first before reference=======================================(18)      
    if not lib:===========================================================================(19)      
        print(f"{mo.__name__} has: \n{dun_all} items in its __all__, and \n{len(funcs)} user defined functions, \n{len(classes)} classes or class objects, \n{len(builtins)} builtin funcs and methods, and\n{len(callables)} callables.\n")  (20)
    if hasattr(mo, "__all__") and dun: ===================================================(21)      
        maxlen = max(map(lambda i : len(i) , mo.__all__ ))================================(22)      
        for i in mo.__all__:==============================================================(23)      
            obj = eval(i, module_env)=====================================================(24)      
            if ismetaclass(obj):==========================================================(25)      
                kind = "metaclass" =======================================================(26)      
            elif inspect.isclass(obj):====================================================(27)      
                kind = "class"============================================================(28)      
            elif isdecorator(obj):========================================================(29)      
                kind = "decorator"========================================================(30) # [91;1mget names of all modules of a lib[0m; 
            elif inspect.isfunction(obj):=================================================(31)      
                kind = "function"=========================================================(32)      
            tp = type(eval(i, module_env)).__name__=======================================(33)      
            startlen = len(i)=============================================================(34)      
            if tp == kind: print(i + ":" + " "*(maxlen-startlen + 5) + kind + "    " + \==(35)      
                                 inspect.getdoc(eval(i, module_env)))  ===================(36)      
            elif kind != None and callable(eval(i, module_env)): print(i + ":" + " "*(maxlen-startlen+5) + kind + ", " + tp + "    " + \                (37)
                                 str(inspect.getdoc(eval(i, module_env))))================(38)      
#             elif tp != 'NoneType': print(i + ":" + " "*(maxlen-startlen+5) + kind + ", " + tp + "    " + \                                            (39)
#                                  inspect.getdoc(eval(i, module_env)))===================(40)      
            else: print(i + ":" + tp)=====================================================(41)      
    if func: =============================================================================(42)      
        print(f'The user defined functions are:')=========================================(43)      
        maxlen = max(map(lambda i : len(i[0]) , funcs ))==================================(44)      
        for i in funcs:===================================================================(45)      
            if isdecorator(i[1]):=========================================================(46)      
                kind = "decorator"========================================================(47)      
            elif inspect.isfunction(i[1]):================================================(48)      
                kind = "function"=========================================================(49)      
#             print(f"{i[0]}: {kind}")  ==================================================(50)      
            startlen = len(i[0])==========================================================(51)      
            print(i[0] + ":" + " "*(maxlen-startlen + 5) + kind + "    " + \==============(52)      
                                 str(inspect.signature(i[1])))               =============(53)      
    if clas: =============================================================================(54)      
        print(f'The class objects are:')==================================================(55)      
        maxlen = max(map(lambda i : len(i[0]) , funcs ))==================================(56)      
        for i in classes:=================================================================(57)      
            if ismetaclass(i[1]):=========================================================(58)      
                kind = "metaclass"========================================================(59)      
            elif inspect.isclass(i[1]):===================================================(60)      
                kind = "class"============================================================(61)      
#             print(f"{i[0]}: {kind}")  ==================================================(62)      
            startlen = len(i[0])==========================================================(63)      
            if not inspect.isbuiltin(i[1]):         ======================================(64)      
                print(i[0] + ":" + " "*(maxlen-startlen + 5) + kind)======================(65)      
    if method: ===========================================================================(66)      
        print(f'The methods are:')========================================================(67)      
        pprint([i[0] for i in methods])===================================================(68)      
    if bltin: ============================================================================(69)      
        print(f'The builtin functions or methods are:')===================================(70)      
        pprint([i[0] for i in builtins])==================================================(71)      
    if cal: ==============================================================================(72)      
        print(f'The callables are: ')=====================================================(73)      
        pprint([i[0] for i in callables])=================================================(74)      
    if lib: ==============================================================================(75)      
        modules = [name for _, name, _ in pkgutil.iter_modules([pkgpath])]================(76)      
        print(f'The library has {len(modules)} modules')==================================(77)      
        pprint(modules)===================================================================(78)      
                                                                                                                                                        (79)
