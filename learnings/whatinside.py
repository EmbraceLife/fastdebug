whatinside(core, lib=True)
def whatinside(mo, # module, e.g., `import fastcore.all as fa`, use `fa` here=============(0)       
               dun:bool=False, # print all items in __all__===============================(1)       
               func:bool=False, # print all user defined functions========================(2)       
               clas:bool=False, # print all class objects=================================(3)       
               bltin:bool=False, # print all builtin funcs or methods=====================(4)       
               lib:bool=False, # print all the modules of the library it belongs to=======(5)       
               cal:bool=False # print all callables=======================================(6)       
             ): ==========================================================================(7)       
    'Check what inside a module: `__all__`, functions, classes, builtins, and callables'==(8)       
    dun_all = len(mo.__all__) if hasattr(mo, "__all__") else 0============================(9) # [93;1mhow many items inside mo.__all__?[0m; 
    funcs = inspect.getmembers(mo, inspect.isfunction)====================================(10) # [37;1mget all funcs of a module[0m; 
    classes = inspect.getmembers(mo, inspect.isclass)=====================================(11) # [37;1mget all classes from the module[0m; 
    builtins = inspect.getmembers(mo, inspect.isbuiltin)==================================(12)      
    callables = inspect.getmembers(mo, callable)==========================================(13)      
    pkgpath = os.path.dirname(mo.__file__)================================================(14) # [92;1mget the file path of the module[0m; 
    module_env = mo.__dict__==============================================================(15)      
    if not lib:===========================================================================(16)      
        print(f"{mo.__name__} has: \n{dun_all} items in its __all__, and \n{len(funcs)} user defined functions, \n{len(classes)} classes or class objects, \n{len(builtins)} builtin funcs and methods, and\n{len(callables)} callables.\n")  (17)
    if hasattr(mo, "__all__") and dun: ===================================================(18)      
        maxlen = max(map(lambda i : len(i) , mo.__all__ ))================================(19)      
        for i in mo.__all__:==============================================================(20)      
            obj = eval(i, module_env)=====================================================(21)      
            if ismetaclass(obj):==========================================================(22)      
                kind = "metaclass" =======================================================(23)      
            elif inspect.isclass(obj):====================================================(24)      
                kind = "class"============================================================(25)      
            elif isdecorator(obj):========================================================(26)      
                kind = "decorator"========================================================(27)      
            elif inspect.isfunction(obj):=================================================(28)      
                kind = "function"=========================================================(29)      
            tp = type(eval(i, module_env)).__name__=======================================(30) # [92;1mget names of all modules of a lib[0m; 
            startlen = len(i)=============================================================(31)      
            if tp == kind: print(i + ":" + " "*(maxlen-startlen + 5) + kind + "    " + \==(32)      
                                 inspect.getdoc(eval(i, module_env)))  ===================(33)      
            else: print(i + ":" + " "*(maxlen-startlen+5) + kind + ", " + tp + "    " + \=(34)      
                                 inspect.getdoc(eval(i, module_env)))=====================(35)      
    if func: =============================================================================(36)      
        print(f'The user defined functions are:')=========================================(37)      
        maxlen = max(map(lambda i : len(i[0]) , funcs ))==================================(38)      
        for i in funcs:===================================================================(39)      
            if isdecorator(i[1]):=========================================================(40)      
                kind = "decorator"========================================================(41)      
            elif inspect.isfunction(i[1]):================================================(42)      
                kind = "function"=========================================================(43)      
#             print(f"{i[0]}: {kind}")  ==================================================(44)      
            startlen = len(i[0])==========================================================(45)      
            print(i[0] + ":" + " "*(maxlen-startlen + 5) + kind + "    " + \==============(46)      
                                 str(inspect.signature(i[1])))               =============(47)      
    if clas: =============================================================================(48)      
        print(f'The class objects are:')==================================================(49)      
        maxlen = max(map(lambda i : len(i[0]) , funcs ))==================================(50)      
        for i in classes:=================================================================(51)      
            if ismetaclass(i[1]):=========================================================(52)      
                kind = "metaclass"========================================================(53)      
            elif inspect.isclass(i[1]):===================================================(54)      
                kind = "class"============================================================(55)      
#             print(f"{i[0]}: {kind}")  ==================================================(56)      
            startlen = len(i[0])==========================================================(57)      
            if not inspect.isbuiltin(i[1]):         ======================================(58)      
                print(i[0] + ":" + " "*(maxlen-startlen + 5) + kind)======================(59)      
    if bltin: ============================================================================(60)      
        print(f'The builtin functions or methods are:')===================================(61)      
        pprint([i[0] for i in builtins])==================================================(62)      
    if cal: ==============================================================================(63)      
        print(f'The callables are: ')=====================================================(64)      
        pprint([i[0] for i in callables])=================================================(65)      
    if lib: ==============================================================================(66)      
        modules = [name for _, name, _ in pkgutil.iter_modules([pkgpath])]================(67)      
        print(f'The library has {len(modules)} modules')==================================(68)      
        pprint(modules)===================================================================(69)      
                                                                                                                                                        (70)
