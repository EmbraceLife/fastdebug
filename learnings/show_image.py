
# pp.deep(lambda: Image.open(TEST_IMAGE_BW))
im = Image.open(TEST_IMAGE_BW)
ax = show_image(im, cmap="Greys")

@delegates(plt.Axes.imshow, keep=True, but=['shape', 'imlim'])============================(0)       
def show_image(im, ax=None, figsize=None, title=None, ctx=None, **kwargs):================(1)       
    "Show a PIL or PyTorch image on `ax`."================================================(2)       
    # Handle pytorch axis order===========================================================(3) # [35;1mim can be a pytorch tensor, np.array or pure a PIL image object which will then be turned into np.array[0m; [93;1mif im is a pytorch tensor and 1st dim is < 5, meaning if color channel is not the last dim, then the dims will be permuted[0m; [34;1mif im has only one channel, remove the dim for the channel[0m; [36;1max and its options are used to display[0m; 
    if hasattrs(im, ('data','cpu','permute')):============================================(4)       
        im = im.data.cpu()================================================================(5)       
        if im.shape[0]<5: im=im.permute(1,2,0)============================================(6)       
    elif not isinstance(im,np.ndarray): im=array(im)======================================(7)       
    # Handle 1-channel images=============================================================(8)       
    if im.shape[-1]==1: im=im[...,0]======================================================(9)       
                                                                                                                                                        (10)
    ax = ifnone(ax,ctx)===================================================================(11)      
    if figsize is None: figsize = (_fig_bounds(im.shape[0]), _fig_bounds(im.shape[1]))====(12)      
    if ax is None: _,ax = plt.subplots(figsize=figsize)===================================(13)      
    ax.imshow(im, **kwargs)===============================================================(14)      
    if title is not None: ax.set_title(title)=============================================(15)      
    ax.axis('off')========================================================================(16)      
    return ax=============================================================================(17)      
                                                                                                                                                        (18)
