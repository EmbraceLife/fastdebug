---
jupyter: python3
---

# 0001_Is it a bird? Creating a model from your own data

## Install and update fastai and duckduckgo_search

```{python}
# !mamba update -q -y fastai
```

```{python}
# !pip install -Uqq duckduckgo_search
```

## Know a little about the libraries

```{python}
from fastdebug.utils import *
from fastdebug.core import *
```

### what is fastai

```{python}
import fastai
```

```{python}
whichversion("fastai")
```

```{python}
whatinside(fastai, lib=True)
```

```{python}
import fastai.losses as fl
```

```{python}
whatinside(fl, dun=True)
```

### what is duckduckgo

```{python}
import duckduckgo_search
```

```{python}
whichversion("duckduckgo_search")
```

```{python}
whatinside(duckduckgo_search)
```

```{python}
whatinside(duckduckgo_search, func=True)
```


## Download images

```{python}
from duckduckgo_search import ddg_images
from fastcore.all import *
```

```{python}
def search_images(term, max_images=30):
    print(f"Searching for '{term}'")
    return L(ddg_images(term, max_results=max_images)).itemgot('image')
```

```{python}
#NB: `search_images` depends on duckduckgo.com, which doesn't always return correct responses.
#    If you get a JSON error, just try running it again (it may take a couple of tries).
urls = search_images('bird photos', max_images=1)
urls[0]
```

```{python}
from fastdownload import download_url
dest = 'bird.jpg'
download_url(urls[0], dest, show_progress=False)

from fastai.vision.all import *
im = Image.open(dest)
im.to_thumb(256,256)
```

```{python}
download_url(search_images('forest photos', max_images=1)[0], 'forest.jpg', show_progress=False)
Image.open('forest.jpg').to_thumb(256,256)
```



```{python}
from fastdebug.utils import *
from fastdebug.core import *
```

```{python}

def openNB(name, folder='nbs/demos/', db=False):
    "Get a link to the notebook at by name locally"
#     root = "/Users/Natsume/Documents/fastdebug/"
#     root_server = "http://localhost:8888/tree/"
    root = getrootport()[1] + "/"
    root_server = getrootport()[0]
    path = root + folder
    path_server = root_server + folder
    for f in os.listdir(path):  
        if f.endswith(".ipynb"):
            name = name.split('.md')[0]
            if db: print(f, name)
            if name in f: 
                file_name = path_server + f
                jn_link(name, file_name)
```

```{python}
def fastnbs(question:str, accu:float=0.8, n=10, nb=False, db=False):
    "using keywords to search learning points from my documented fastai notebooks"
    questlst = question.split(' ')
    folder ='/Users/Natsume/Documents/divefastai/Debuggable/jupytext/2022part1/'
#     folder ='/Users/Natsume/Documents/divefastai/Debuggable/nbconvert/'    
    for f in os.listdir(folder):
        if f.endswith(".md"):
            file_name =folder + f
            with open(file_name, 'r') as file:
                for count, l in enumerate(file):
                    truelst = [q in l for q in questlst]
                    pct = sum(truelst)/len(truelst)
                    if pct >= accu and (l.startswith("##") or l.startswith("###") or l.startswith("####")):
                        head1 = f"keyword match is {pct}, Found a section: in {f}"
                        head1 = highlight(str(pct), head1)
                        head1 = highlight(f, head1)
                        display_md(head1)
                        highlighted_line = highlight(question, l, db=db)                        
                        display_md(highlighted_line)
                        print()
                        display_block(l, folder+f)
                        if nb: openNB(f, "nbs/2022part1/", db=db)
```

```{python}
"### head".count("#")
```

```{python}
def display_block(line, file):
    "skim each line and put them together if they are in the same code block and display them together"
    from IPython.display import Markdown
    with open(file, 'r') as file:
        entire = file.read()
        belowline = entire.split(line)[1]
        head_no = line.count("#")
        section_content = belowline.split("#"*head_no)[0]
        entire_section = line + "\n" + section_content
#         print(f'entire_section: {entire_section}')
        display(Markdown(entire_section))
#         print(entire)
    
```

```{python}
fastnbs("what is fastai", n=20, nb=True, db=False)
```



